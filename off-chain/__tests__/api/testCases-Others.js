const { expectedBodySchemaTime, expectedBodySchemaHealth, expectedBodySchemaInit,expectedBodySchemaCSRF,
    expectedBodySchemaChallengue, } = require('./baseTestCases');

const testCases = [
    {
        category: 'Time',
        description: 'should return 200 and the current server time',
        method: 'GET',
        url: '/api/time/get',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 200,
        expectedBodySchema: expectedBodySchemaTime,
    },
    {
        category: 'Health Check',
        description: 'should return 200 and status ok when the application is healthy',
        method: 'GET',
        url: '/api/health',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 200,
        expectedBodySchema: expectedBodySchemaHealth,
    },
    {
        category: 'Initialization',
        description: 'should return 200 and initialization complete',
        method: 'POST',
        url: '/api/init',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 200,
        expectedBodySchema: expectedBodySchemaInit,
    },
    {
        category: 'CSRF Token',
        description: 'should return 200 and the CSRF token',
        method: 'GET',
        url: '/api/auth/csrf',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 200,
        expectedBodySchema: expectedBodySchemaCSRF,
    },
    {
        category: 'Smart DB Auth',
        description: 'get-challengue should return 200 and a challenge token',
        method: 'GET',
        url: '/api/smart-db-auth/get-challengue',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 200,
        expectedBodySchema: expectedBodySchemaChallengue,
    },
    {
        category: 'Smart DB Auth',
        description: 'get-challengue should return 405 when method is not allowed',
        method: 'POST',
        url: '/api/smart-db-auth/get-challengue',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 405,
    },
    {
        category: 'Smart DB Auth',
        description: 'get-token should return 405 when method is not allowed',
        method: 'GET',
        url: '/api/smart-db-auth/get-token',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 405,
    },
];

module.exports = {
    testCases,
};
